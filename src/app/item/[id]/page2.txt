import Footer from "@/components/Footer/Footer";
import Header from "@/components/Header/Header";
import axios from "axios";
import { notFound } from "next/navigation";

interface Skin {
    id: string;
    name: string;
    description: string;
    weapon: {
        id: string;
        name: string;
    };
    category: {
        id: string;
        name: string;
    };
    pattern: {
        id: string;
        name: string;
    };
    min_float: number;
    max_float: number;
    rarity: {
        id: string;
        name: string;
        color: string;
    };
    stattrak: string;
    souvenir: string;
    finish_style: {
        id: string;
        name: string;
    };
    paint_index: string;
    wears: Array<{
        id: string;
        name: string;
    }>;
    collections: Array<{
        id: string;
        name: string;
        image: string;
    }>;
    crates: Array<{
        id: string;
        name: string;
        image: string;
    }>;
    team: {
        id: string;
        name: string;
    };
    image: string;
}

interface PriceData {
    [key: string]: {
        steam: {
            last_24h: number | null;
            last_7d: number | null;
            last_30d: number | null;
            last_90d: number | null;
        };
    };
}

export default async function Item({ params }: { params: { id: string } }) {
    function formatSkinName(name: string): string {
        return name
            .replace(/\|/g, "")
            .replace(/CS:GO/g, "")
            .replace(/StatTrak™/g, "")
            .replace(/\(Holo\/Foil\)/g, "")
            .replace(/\(Foil\)/g, "")
            .replace(/★/g, "")
            .replace(/\s* & \s*/g, "-")
            .replace(/\s+/g, "-")
            .replace(/-+/g, "-")
            .toLowerCase()
            .replace(/^-+/g, "")
            .replace(/-+$/g, "");
    }

    async function fetchSkinData(): Promise<Skin[] | null> {
        try {
            const response = await axios.get(
                "https://api.cs2data.info/en/skins.json"
            );
            return response.data || null;
        } catch {
            return null;
        }
    }

    async function fetchPriceData(): Promise<PriceData | null> {
        try {
            const response = await axios.get(
                "https://raw.githubusercontent.com/LukeTheNeko/cs2-prices-tracker/refs/heads/main/static/prices/latest.json"
            );
            return response.data || null;
        } catch {
            return null;
        }
    }

    const skins = await fetchSkinData();
    const prices = await fetchPriceData();

    if (!skins || !prices) {
        return notFound();
    }

    const skin = skins.find((item) => formatSkinName(item.name) === params.id);

    if (!skin) {
        return notFound();
    }

    const getPrices = (
        baseName: string,
        prefix: string = ""
    ) => {
        const pricesData: { [condition: string]: number | null } = {};
        const conditions = ["Factory New", "Minimal Wear", "Field-Tested", "Well-Worn", "Battle-Scarred"];
        const timeFrames: Array<"last_24h" | "last_7d" | "last_30d" | "last_90d"> = [
            "last_24h",
            "last_7d",
            "last_30d",
            "last_90d"
        ];

        for (const condition of conditions) {
            const priceKeyBase = `${prefix}${baseName} (${condition})`;

            // Itera sobre os períodos de tempo, procurando o primeiro preço disponível
            for (const timeFrame of timeFrames) {
                const price = prices[priceKeyBase]?.steam?.[timeFrame];

                if (price !== undefined && price !== null) {
                    pricesData[condition] = price; // Se encontrar um preço, armazena
                    break; // Sai do loop para a próxima condição
                }
            }

            // Se nenhum preço foi encontrado, definir como null
            if (!(condition in pricesData)) {
                pricesData[condition] = null;
            }
        }

        return pricesData;
    };

    const basePriceKey = skin.name;

    // Preços regulares
    const regularPrices = getPrices(basePriceKey);

    // Preços StatTrak
    const statTrakPrices = skin.stattrak
        ? getPrices(basePriceKey, "StatTrak™ ")
        : null;

    // Preços Souvenir
    const souvenirPrices = skin.souvenir
        ? getPrices(basePriceKey, "Souvenir ")
        : null;

    return (
        <>
            <Header />
            <div className="bg-zinc-900 text-white h-screen flex flex-col">
                <div className="gap-6 flex justify-center mx-20 my-10 bg-red-800">
                    <div className="flex flex-col justify-between gap-2 w-[410px] rounded-md">

                        <div className="flex flex-col rounded-md bg-black-300">
                            {Object.entries(regularPrices).map(
                                ([condition, price]) => (
                                    <div className="flex justify-between py-1 px-4 rounded hover:bg-black-450 cursor-pointer" key={condition}>
                                        <span>{condition}</span>
                                        <span>{price !== null && price !== undefined ? `$${price.toFixed(2)}` : 'No recent prices'}</span> {/* Exibe No recent prices se o preço for null ou undefined */}
                                    </div>
                                )
                            )}
                        </div>

                        {skin.stattrak && statTrakPrices && (
                            <div className="flex flex-col rounded-md bg-black-300">
                                {Object.entries(statTrakPrices).map(
                                    ([condition, price]) => (
                                        <div className="flex justify-between py-1 px-4 rounded hover:bg-black-450 cursor-pointer" key={condition}>
                                            <span>
                                                <span className="text-orange-400 font-medium">StatTrak</span>{" "}
                                                {condition}
                                            </span>
                                            <span>{price !== null && price !== undefined ? `$${price.toFixed(2)}` : 'No recent prices'}</span>
                                        </div>
                                    )
                                )}
                            </div>
                        )}

                        {skin.souvenir && souvenirPrices && (
                            <div className="flex flex-col rounded-md bg-black-300">
                                {Object.entries(souvenirPrices).map(
                                    ([condition, price]) => (
                                        <div className="flex justify-between py-1 px-4 rounded hover:bg-black-450 cursor-pointer" key={condition}>
                                            <span>
                                                <span className="text-yellow-400 font-medium">Souvenir</span>{" "}
                                                {condition}
                                            </span>
                                            <span>{price !== null && price !== undefined ? `$${price.toFixed(2)}` : 'No recent prices'}</span>
                                        </div>
                                    )
                                )}
                            </div>
                        )}
                    </div>
                </div>
                <Footer />
            </div>
        </>
    );
}
